---
title: "Differential gene expression analysis and GSEA"
date: '`r format(Sys.Date(), "%B %d, %Y")`'
output:
  html_document:
    self_contained: true
    highlight: tango
    df_print: paged
    toc: yes
    toc_float:
      collapsed: false
      smooth_scroll: true
    toc_depth: 3
    keep_md: yes
    fig_caption: true
  html_notebook:
    self_contained: true
    highlight: tango
    df_print: paged
    toc: yes
    toc_float:
      collapsed: false
      smooth_scroll: true
    toc_depth: 3
editor_options: 
  chunk_output_type: inline
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(message=FALSE, warning=FALSE, result='hold',fig.width=12,tidy=TRUE)
knitr::opts_knit$set(progress=TRUE,verbose=TRUE)
```
<style>
h1, .h1, h2, .h2, h3, .h3, h4, .h4 { margin-top: 50px }
p.caption {font-size: 0.9em;font-style: italic;color: grey;margin-right: 10%;margin-left: 10%;text-align: justify}
</style>

***
# Loading data and libraries

### Libraries

```{r, echo=FALSE, message=FALSE, warning=FALSE, results='hold'}
suppressMessages(require(Matrix))
suppressPackageStartupMessages({
library(dplyr)
library(tidyverse)
library(Seurat)
library(MAST)
library(venn)
library(UpSetR)
library(msigdbr)
library(fgsea)
})
```

### Data

```{r echo=TRUE, message=FALSE, warning=FALSE}
alldata <- readRDS("../Anno/ClustAnnotation_230128_output/QC_230128_DataInt_230128_Anno_230128.rds")

# Check DefaultAssay, should be "RNA"
DefaultAssay(alldata)
```
***

# DEG WT

### Mock vs no treatment

```{r}

alldata <- SetIdent(alldata, value = "treatment")

setwd("./wt_mock_vs_none_230112")

#Specifying which cell types to run DE analysis on
celltypes <- c("Neuron_ex", "Neuron_in", "Micro", "Astro", "Oligo", "OPC", "VLMCs", "Peri", "Endo")

deg.no <- c()

for (i in celltypes) {
  
  print(i)
  
  alldata %>%
  subset(., genotype == "wt") %>%
  subset(., subset = celltype == i) %>%
    FindMarkers(., ident.1 = "mock", ident.2 = "none", logfc.threshold = 1, 
                test.use = "MAST") %>%
    .[ which(.$p_val_adj < 0.05), ] %>%
    arrange(-avg_log2FC) -> deg

  temp.no <- c(i, nrow(deg[ which(deg$avg_log2FC > 0), ]), nrow(deg[ which(deg$avg_log2FC < 0), ]))
  deg.no <- rbind(deg.no, temp.no)
  
  
# writing to csv, one file per cell type
  write.csv2(deg, paste0(i,"_DEG_wt_mock_vs_none_avgl2FC_1.csv"), row.names = TRUE)
  
}

write.csv(deg.no, file = "no_DEG_wt_mock_vs_none_avgl2FC_1.csv", row.names = FALSE)
```

### Lgtv vs mock + no treatment

```{r}

alldata <- SetIdent(alldata, value = "inf")

setwd("./wt_lgtv_vs_mocknone_230112")

#Specifying which cell types to run DE analysis on
celltypes <- c("Neuron_ex", "Neuron_in", "Micro", "Astro", "Oligo", "OPC", "VLMCs", "Peri", "Endo", "ChP")

deg.no <- c()

for (i in celltypes) {
  
  print(i)
  
  alldata %>%
  subset(., genotype == "wt") %>%
  subset(., subset = celltype == i) %>%
    FindMarkers(., ident.1 = "yes", ident.2 = "no", logfc.threshold = 1, 
                test.use = "MAST") %>%
    .[ which(.$p_val_adj < 0.05), ] %>%
    arrange(-avg_log2FC) -> deg

  temp.no <- c(i, nrow(deg[ which(deg$avg_log2FC > 0), ]), nrow(deg[ which(deg$avg_log2FC < 0), ]))
  deg.no <- rbind(deg.no, temp.no)

# writing to csv, one file per cell type
  write.csv2(deg, paste0(i,"_DEG_wt_lgtv_vs_mocknone_log2FC_1.csv"), row.names = TRUE)
  
}

write.csv(deg.no, file = "no_DEG_wt_lgtv_vs_mocknone_log2FC_1.csv", row.names = FALSE)
```
### Overlap in DEG

```{r}
# Load DEGs
setwd("./wt_lgtv_vs_mocknone_230112")
astro.deg <- read.csv2(file = "./Astro_DEG_wt_lgtv_vs_mocknone_log2FC_1.csv", row.names = 1)
micro.deg <- read.csv2(file = "./Micro_DEG_wt_lgtv_vs_mocknone_log2FC_1.csv", row.names = 1)
oligo.deg <- read.csv2(file = "./Oligo_DEG_wt_lgtv_vs_mocknone_log2FC_1.csv", row.names = 1)
VLMCs.deg <- read.csv2(file = "./VLMCs_DEG_wt_lgtv_vs_mocknone_log2FC_1.csv", row.names = 1)
endo.deg <- read.csv2(file = "./Endo_DEG_wt_lgtv_vs_mocknone_log2FC_1.csv", row.names = 1)
```

```{r}
# Select only upregulated genes
micro.deg.up <- micro.deg[which(micro.deg$avg_log2FC > 0),]
astro.deg.up <- astro.deg[which(astro.deg$avg_log2FC > 0),]
oligo.deg.up <- oligo.deg[which(oligo.deg$avg_log2FC > 0),]
endo.deg.up <- endo.deg[which(endo.deg$avg_log2FC > 0),]
VLMCs.deg.up <- VLMCs.deg[which(VLMCs.deg$avg_log2FC > 0),]

# Prepare list for Venn diagram
up <- list(micro = rownames(micro.deg.up), astro = rownames(astro.deg.up), oligo = rownames(oligo.deg.up), Endo =rownames(endo.deg.up), VLMCs =rownames(VLMCs.deg.up))

# Make Venn diagram to check
up <- venn::venn(up, zcolor = "style")

# Write file to use for making UpSetR graph_GSEA
write.csv2(up, file = "up_wt_no_overlapping_genes_230128_VLMCs.csv", row.names = TRUE)
```

### UpSetR graph

```{r}
# Manually constructed from file for venn diagram
up <- c(
  Micro = 253,
  Astro = 70,
  Oligo = 46,
  Endo = 28,
  VLMCs = 38,
  "Endo&VLMCs" = 6,
  "Oligo&VLMCs" = 3,
  "Astro&VLMCs" = 12,
  "Astro&Endo" = 3,
  "Astro&Endo&VLMCs" = 4,
  "Astro&Oligo" = 12,
  "Astro&Oligo&VLMCs" = 13,
  "Astro&Oligo&Endo&VLMCs" = 3,
  "Micro&VLMCs" = 57,
  "Micro&Endo" = 3,
  "Micro&Endo&VLMCs" = 15,
  "Micro&Oligo" = 9,
  "Micro&Oligo&VLMCs" = 3,
  "Micro&Astro" = 21,
  "Micro&Astro&VLMCs" = 24,
  "Micro&Astro&Endo" = 1,
  "Micro&Astro&Endo&VLMCs" = 16,
  "Micro&Astro&Oligo" = 6,
  "Micro&Astro&Oligo&VLMCs" = 48,
  "Micro&Astro&Oligo&Endo" = 1,
  "Micro&Astro&Oligo&Endo&VLMCs" = 73
  )

# Write to pdf
pdf("UpSetR_wt_up_with_numbers_230128.pdf", onefile = TRUE, width=9, height=5.2)
upset(fromExpression(up), 
      nsets = 5, 
      nintersects = 28, 
      sets = c( "Endo", "Oligo", "Astro", "VLMCs", "Micro"),
      keep.order = T, 
      set.metadata = NULL, 
      intersections = NULL, 
      matrix.color = "black", 
      main.bar.color = "black",
      mainbar.y.label = "", 
      mainbar.y.max = 300,  
      sets.bar.color = "black", 
      sets.x.label = "Total DEGs",
      point.size = 5, 
      line.size = 2, 
      mb.ratio = c(0.5, 0.5),
      expression = NULL, 
      att.pos = NULL, 
      order.by = "freq", 
      decreasing = c(T, F),
      show.numbers = "yes", 
      number.angles = 0, 
      group.by = "degree",
      cutoff = NULL, 
      queries = NULL, 
      query.legend = "none",
      shade.color = "gray88", shade.alpha = 0.25, matrix.dot.alpha = 0.5,
      empty.intersections = "on", color.pal = 1, boxplot.summary = NULL,
      attribute.plots = NULL, scale.intersections = "identity",
      scale.sets = "identity", text.scale = c(1, 3.5, 3.5, 3.5, 3.5, 1), 
      set_size.angles = 0,
      set_size.show = F, set_size.numbers_size = NULL,
      set_size.scale_max = 620
      )
dev.off()
```

### GSEA of wt

```{r}

setwd("./wt_lgtv_vs_mocknone_230112/fgsea_reactome")

# Setting infection as active ident
alldata <- SetIdent(alldata, value = "inf")

## Generating Pathways in correct format!
C2_gene_sets = msigdbr(species = "mouse", category = "C2", subcategory = "CP:REACTOME")
msigdbr_list = split(x = C2_gene_sets$gene_symbol, f = C2_gene_sets$gs_name)

#Specifying which cell types to run DE analysis on
celltypes <- c("Neuron_ex", "Neuron_in", "Micro", "Astro", "Oligo", "OPC", "VLMCs", "Peri", "Endo", "ChP")

deg.no <- c()

for (i in celltypes) {
  
  print(i)

  alldata %>%
  subset(., genotype == "wt") %>%
  subset(., subset = celltype == i) %>%
    FindMarkers(., ident.1 = "yes", ident.2 = "no", logfc.threshold = 0, 
                test.use = "MAST") -> deg
  
deg <- deg[ ! grepl("^mt-", rownames(deg)), ]
deg <- deg[ ! grepl("^Rp[sl]", rownames(deg)), ]  
  
# Extracting gene symbls
genes_name <- rownames(deg)

# Adding gene symbols as a column in DEG.x
deg <- cbind(genes_name, deg)

# Keeping only log2FC and gene names
deg <- deg[, c("genes_name", "avg_log2FC")]

# Order the list based on log2FC values
deg <- deg[order(-deg$avg_log2FC),]

# Generating proper format for fgsea
deg <- setNames(deg$avg_log2FC, deg$genes_name)

# Double check class of input file (should be "numeric")
class(deg)

fgseaRes <- fgseaMultilevel(pathways = msigdbr_list, stats = deg, scoreType = "std")
fgseaRes <- fgseaRes[ which(fgseaRes$padj < 0.05), ]

# writing to csv, one file per cell type
write.csv2(fgseaRes[,1:7], paste0(i,"_wt_REACTOME_pathways_230128.csv"), row.names = FALSE)

  temp.no <- c(i, nrow(fgseaRes[ which(fgseaRes$NES > 0), ]), nrow(fgseaRes[ which(fgseaRes$NES < 0), ]))
  deg.no <- rbind(deg.no, temp.no)
} 

write.csv(deg.no, file = "No_wt_REACTOME_pathways_230128.csv", row.names = FALSE)

```

***

# Ifnar

### Ifnar vs WT baseline (mock and no treatment)

```{r}

alldata <- SetIdent(alldata, value = "genotype")

setwd("./ifnar_vs_wt_no_inf_230112")

#Specifying which cell types to run DE analysis on
celltypes <- c("Neuron_ex", "Neuron_in", "Micro", "Astro", "Oligo", "OPC", "VLMCs", "Peri", "Endo", "ChP")

deg.no <- c()

for (i in celltypes) {
  
  print(i)
  
  alldata %>%
  subset(., inf == "no") %>%
  subset(., subset = celltype == i) %>%
    FindMarkers(., ident.1 = "ifnar", ident.2 = "wt", logfc.threshold = 1, 
                test.use = "MAST") %>%
    .[ which(.$p_val_adj < 0.05), ] %>%
    arrange(-avg_log2FC) -> deg

  temp.no <- c(i, nrow(deg[ which(deg$avg_log2FC > 0), ]), nrow(deg[ which(deg$avg_log2FC < 0), ]))
  deg.no <- rbind(deg.no, temp.no)
  
# writing to csv, one file per cell type
  write.csv2(deg, paste0(i,"_DEG_wt_vs_ifnar_no_inf_avgl2FC_1.csv"), row.names = TRUE)
  
}

write.csv(deg.no, file = "no_DEG_wt_vs_ifnar_no_inf_avgl2FC_1.csv", row.names = FALSE)

```

### Mock vs untreated

```{r}

alldata <- SetIdent(alldata, value = "treatment")

setwd("./ifnar_mock_vs_none_230112")

#Specifying which cell types to run DE analysis on
celltypes <- c("Neuron_ex", "Neuron_in", "Micro", "Astro", "Oligo", "OPC", "VLMCs", "Peri", "Endo", "ChP")

deg.no <- c()

for (i in celltypes) {
  
  print(i)
  
  alldata %>%
  subset(., genotype == "ifnar") %>%
  subset(., subset = celltype == i) %>%
    FindMarkers(., ident.1 = "mock", ident.2 = "none", logfc.threshold = 1, 
                test.use = "MAST") %>%
    .[ which(.$p_val_adj < 0.05), ] %>%
    arrange(-avg_log2FC) -> deg

  temp.no <- c(i, nrow(deg[ which(deg$avg_log2FC > 0), ]), nrow(deg[ which(deg$avg_log2FC < 0), ]))
  deg.no <- rbind(deg.no, temp.no)
  
  
# Writing to csv, one file per cell type
  write.csv2(deg, paste0(i,"_DEG_ifnar_mock__vs_none_avgl2FC_1.csv"), row.names = TRUE)
  
}

write.csv(deg.no, file = "no_DEG_ifnar_mock__vs_none_avgl2FC_1.csv", row.names = FALSE)

```

### LGTV vs mock + untreated

```{r}

alldata <- SetIdent(alldata, value = "inf")

#
setwd("./ifnar_lgtv_vs_mocknone_230112")

#Specifying which cell types to run DE analysis on
celltypes <- c("Neuron_ex", "Neuron_in", "Micro", "Astro", "Oligo", "OPC", "VLMCs", "Peri", "Endo", "ChP")

deg.no <- c()

for (i in celltypes) {
  
  print(i)
  
  alldata %>%
  subset(., genotype == "ifnar") %>%
  subset(., subset = celltype == i) %>%
    FindMarkers(., ident.1 = "yes", ident.2 = "no", logfc.threshold = 1, 
                test.use = "MAST") %>%
    .[ which(.$p_val_adj < 0.05), ] %>%
    arrange(-avg_log2FC) -> deg

  temp.no <- c(i, nrow(deg[ which(deg$avg_log2FC > 0), ]), nrow(deg[ which(deg$avg_log2FC < 0), ]))
  deg.no <- rbind(deg.no, temp.no)

# Wwriting to csv, one file per cell type
  write.csv2(deg, paste0(i,"_DEG_ifnar_lgtv_vs_mocknone_avgl2FC_1.csv"), row.names = TRUE)
  
}

write.csv(deg.no, file = "no_DEG_ifnar_lgtv_vs_mocknone_avgl2FC_1.csv", row.names = FALSE)

```

### Overlap in DEG 

```{r}
# Load DEGs
setwd("./ifnar_lgtv_vs_mocknone_230112")
astro.deg <- read.csv2(file = "./Astro_DEG_ifnar_lgtv_vs_mocknone_avgl2FC_1.csv", row.names = 1)
micro.deg <- read.csv2(file = "./Micro_DEG_ifnar_lgtv_vs_mocknone_avgl2FC_1.csv", row.names = 1)
oligo.deg <- read.csv2(file = "./Oligo_DEG_ifnar_lgtv_vs_mocknone_avgl2FC_1.csv", row.names = 1)
VLMCs.deg <- read.csv2(file = "./VLMCs_DEG_ifnar_lgtv_vs_mocknone_avgl2FC_1.csv", row.names = 1)
endo.deg <- read.csv2(file = "./Endo_DEG_ifnar_lgtv_vs_mocknone_avgl2FC_1.csv", row.names = 1)
```


```{r}
# Selecting only upregulated genes
micro.deg.up <- micro.deg[which(micro.deg$avg_log2FC > 0),]
astro.deg.up <- astro.deg[which(astro.deg$avg_log2FC > 0),]
oligo.deg.up <- oligo.deg[which(oligo.deg$avg_log2FC > 0),]
endo.deg.up <- endo.deg[which(endo.deg$avg_log2FC > 0),]
VLMCs.deg.up <- VLMCs.deg[which(VLMCs.deg$avg_log2FC > 0),]

# Making list and Venn diagram
up <- list(micro = rownames(micro.deg.up), astro = rownames(astro.deg.up), oligo = rownames(oligo.deg.up), Endo =rownames(endo.deg.up), VLMCs = rownames(VLMCs.deg.up))
up <- venn::venn(up, zcolor = "style")

# Writing to file for making UpsetR graph
write.csv2(up, file = "up_ifnar_no_overlapping_genes_230128.csv")
```

### UpSetR graph

```{r, fig.height=7, fig.width=8}
 # Manually annotated 
ifnar_up <- c(
  Micro = 105,
  Astro = 21,
  Oligo = 26,
  Endo = 52,
  VLMCs = 10,
  "Endo&VLMCs" = 5,
  "Oligo&VLMCs" = 2,
  "Endo&Oligo" = 1,
  "Astro&VLMCs" = 5,
  "Astro&Endo" = 1,
  "Astro&VLMCs&Endo" = 2,
  "Astro&Oligo" = 5,
  "Astro&VLMCs&Oligo" = 1,
  "Astro&Oligo&Endo" = 2,
  "Astro&VLMCs&Endo&Oligo" = 1,
  "Micro&VLMCs" = 2,
  "Endo&Micro" = 3,
  "Micro&Endo&VLMCs" = 2,
  "Micro&Oligo" = 2,
  "Oligo&VLMCs&Micro" = 2,
  "Micro&Astro" = 15,
  "Micro&Astro&VLMCs" = 1,
  "Micro&Endo&Astro" = 2,
  "Micro&Endo&VLMCs&Astro" = 3,
  "Astro&Micro&Oligo" = 2,
  "Astro&VLMCs&Oligo&Micro" = 3,
  "Astro&Endo&Oligo&Micro" = 1,
  "Astro&VLMCs&Endo&Oligo&Micro" = 9
  )

pdf("UpSetR_ifnar_up_230128.pdf", onefile = TRUE, width=9, height=5.2)
upset(fromExpression(ifnar_up), 
      nsets = 5, 
      nintersects = 28, 
      sets = c("Oligo", "Endo", "Astro", "VLMCs", "Micro"),
      keep.order = TRUE, 
      set.metadata = NULL, 
      intersections = NULL, 
      matrix.color = "gray50", 
      main.bar.color = "gray50",
      mainbar.y.label = "", 
      mainbar.y.max = 300,  
      sets.bar.color = "gray50", 
      sets.x.label = "Total DEGs",
      point.size = 5, 
      line.size = 2, 
      mb.ratio = c(0.5, 0.5),
      expression = NULL, 
      att.pos = NULL, 
      order.by = "freq", 
      decreasing = c(T, F),
      show.numbers = "no", 
      number.angles = 0, 
      group.by = "degree",
      cutoff = NULL, 
      queries = NULL, 
      query.legend = "none",
      shade.color = "gray88", shade.alpha = 0.25, matrix.dot.alpha = 0.5,
      empty.intersections = "on", color.pal = 1, boxplot.summary = NULL,
      attribute.plots = NULL, scale.intersections = "identity",
      scale.sets = "identity", text.scale = c(1, 3.5, 3.5, 3.5, 3.5, 1), 
      set_size.angles = 0,
      set_size.show = F, set_size.numbers_size = NULL,
      set_size.scale_max = 620
      )
dev.off()
```

### GSEA on ifnar

```{r}

setwd("./ifnar_lgtv_vs_mocknone_230112/fgsea_reactome")

#Setting inf as active ident
alldata <- SetIdent(alldata, value = "inf")

## Generating Pathways in correct format!
C2_gene_sets = msigdbr(species = "mouse", category = "C2", subcategory = "CP:REACTOME")
h_gene_sets = msigdbr(species = "mouse", category = "H")
msigdbr_list = split(x = C2_gene_sets$gene_symbol, f = C2_gene_sets$gs_name)

#Specifying which cell types to run DE analysis on
celltypes <- c("Neuron_ex", "Neuron_in", "Micro", "Astro", "Oligo", "OPC", "VLMCs", "Peri", "Endo", "ChP")

deg.no <- c()

for (i in celltypes) {
  
  print(i)

  alldata %>%
  subset(., genotype == "ifnar") %>%
  subset(., subset = celltype == i) %>%
    FindMarkers(., ident.1 = "yes", ident.2 = "no", logfc.threshold = 0, 
                test.use = "MAST") -> deg
  
deg <- deg[ ! grepl("^mt-", rownames(deg)), ]
deg <- deg[ ! grepl("^Rp[sl]", rownames(deg)), ]  
  
#Extracting gene symbls
genes_name <- rownames(deg)

#Adding gene symbols as a column in DEG.x
deg <- cbind(genes_name, deg)

#Keeping only log2FC and gene names
deg <- deg[, c("genes_name", "avg_log2FC")]

#Order the list based on log2FC values
deg <- deg[order(-deg$avg_log2FC),]

#Generating proper format for fgsea
deg <- setNames(deg$avg_log2FC, deg$genes_name)

#Double check class of input file (should be "numeric")
class(deg)

fgseaRes <- fgseaMultilevel(pathways = msigdbr_list, stats = deg, scoreType = "std")
fgseaRes <- fgseaRes[ which(fgseaRes$padj < 0.05), ]

#writing to csv, one file per cell type
write.csv2(fgseaRes[,1:7], paste0(i,"_ifnar_REACTOME_pathways_230112.csv"), row.names = FALSE)

  temp.no <- c(i, nrow(fgseaRes[ which(fgseaRes$NES > 0), ]), nrow(fgseaRes[ which(fgseaRes$NES < 0), ]))
  deg.no <- rbind(deg.no, temp.no)
    
} 

write.csv(deg.no, file = "No_ifnar_REACTOME_pathways_230112.csv", row.names = FALSE)
```

***
# Expression selected genes

### IFN expression

```{r, fig.height=4, fig.width=5}
alldata <- SetIdent(alldata, value = "treatment")

# Subseting data
wt <- subset(alldata, subset = genotype == "wt")
wt.lgtv <- subset(wt, subset = treatment == "lgtv")
ifnar <- subset(alldata, subset = genotype == "ifnar")
ifnar.lgtv <- subset(ifnar, subset = treatment == "lgtv")

# Specifying genes
ifn <- c("Ifng", "Ifnb1", "Ifna2", "Ifna4")

# Write files
wt.ifn <- DotPlot(wt.lgtv, group.by = "celltype", features = ifn, cols = c("lightgrey", "Red4"), scale = F) +theme(axis.text.x = element_text(angle = 45, hjust=1))
ifnar.ifn <- DotPlot(ifnar.lgtv, group.by = "celltype", features = ifn, cols = c("lightgrey", "Red4"), scale = F) +theme(axis.text.x = element_text(angle = 45, hjust=1))
write.csv2(wt.ifn$data, file = "IFN_wt_230128.csv")
write.csv2(ifnar.ifn$data, file = "IFN_ifnar_230128.csv")

```

### ISGs

```{r, fig.height=4, fig.width=5}
alldata <- SetIdent(alldata, value = "treatment")

# specifying genes
isgs <- c("Rsad2", "Ifitm3", "Oas2", "Isg20")

# Writing files
wt.isgs <- DotPlot(wt.lgtv, group.by = "celltype", features = isgs, cols = c("lightgrey", "Red4"), scale = F) +theme(axis.text.x = element_text(angle = 45, hjust=1))
ifnar.isgs <- DotPlot(ifnar.lgtv, group.by = "celltype", features = isgs, cols = c("lightgrey", "Red4"), scale = F) +theme(axis.text.x = element_text(angle = 45, hjust=1))
write.csv2(wt.isgs$data, file = "ISGs_wt_230128.csv")
write.csv2(ifnar.isgs$data, file = "ISGs_ifnar_230128.csv")

```

### Avg counts for Cx- and H2-genes      
        
```{r}


alldata <- SetIdent(alldata, value = "treatment")
inf <- subset(alldata, subset = treatment =="lgtv")

genes <- rownames(inf)
inf <- ScaleData(inf, features = genes)

# Specify genes
Cx_H2 <- c("Ccl2", "Ccl5", "Cxcl10", "Cxcl9", "Cxcr3", "Ccr1", "Ccr2", "Ccr5")

# Subsetting data and extracting avg counts for selected genes
only.micro <- subset(inf, subset = celltype == "Micro")
micro.avg.scaled <- AverageExpression(only.micro, assays = "RNA", group.by = "genotype", slot ="scale.data")
micro.avg.scaled <- micro.avg.scaled[[1]]
micro.avg.scaled.sub <- micro.avg.scaled[Cx_H2, ] 

only.astro <- subset(inf, subset = celltype == "Astro")
astro.avg.scaled <- AverageExpression(only.astro, assays = "RNA", group.by = "genotype", slot ="scale.data")
astro.avg.scaled <- astro.avg.scaled[[1]]
astro.avg.scaled.sub <- astro.avg.scaled[Cx_H2, ]

only.oligo <- subset(inf, subset = celltype == "Oligo")
oligo.avg.scaled <- AverageExpression(only.oligo, assays = "RNA", group.by = "genotype", slot ="scale.data")
oligo.avg.scaled <- oligo.avg.scaled[[1]]
oligo.avg.scaled.sub <- oligo.avg.scaled[Cx_H2, ]

only.endo <- subset(inf, subset = celltype == "Endo")
endo.avg.scaled <- AverageExpression(only.endo, assays = "RNA", group.by = "genotype", slot ="scale.data")
endo.avg.scaled <- endo.avg.scaled[[1]]
endo.avg.scaled.sub <- endo.avg.scaled[Cx_H2, ]

only.OPC <- subset(inf, subset = celltype == "OPC")
OPC.avg.scaled <- AverageExpression(only.OPC, assays = "RNA", group.by = "genotype", slot ="scale.data")
OPC.avg.scaled <- OPC.avg.scaled[[1]]
OPC.avg.scaled.sub <- OPC.avg.scaled[Cx_H2, ]

only.VLMCs <- subset(inf, subset = celltype == "VLMCs")
VLMCs.avg.scaled <- AverageExpression(only.VLMCs, assays = "RNA", group.by = "genotype", slot ="scale.data")
VLMCs.avg.scaled <- VLMCs.avg.scaled[[1]]
VLMCs.avg.scaled.sub <- VLMCs.avg.scaled[Cx_H2, ]

only.ex <- subset(inf, subset = celltype == "Neuron_ex")
ex.avg.scaled <- AverageExpression(only.ex, assays = "RNA", group.by = "genotype", slot ="scale.data")
ex.avg.scaled <- ex.avg.scaled[[1]]
ex.avg.scaled.sub <- ex.avg.scaled[Cx_H2, ]

only.in <- subset(inf, subset = celltype == "Neuron_in")
in.avg.scaled <- AverageExpression(only.in, assays = "RNA", group.by = "genotype", slot ="scale.data")
in.avg.scaled <- in.avg.scaled[[1]]
in.avg.scaled.sub <- in.avg.scaled[Cx_H2, ]

only.pericytes <- subset(inf, subset = celltype == "Peri")
pericytes.avg.scaled <- AverageExpression(only.pericytes, assays = "RNA", group.by = "genotype", slot ="scale.data")
pericytes.avg.scaled <- pericytes.avg.scaled[[1]]
pericytes.avg.scaled.sub <- pericytes.avg.scaled[Cx_H2, ]

only.Tcell <- subset(inf, subset = celltype == "T-cells")
Tcell.avg.scaled <- AverageExpression(only.Tcell, assays = "RNA", group.by = "genotype", slot ="scale.data")
Tcell.avg.scaled <- Tcell.avg.scaled[[1]]
Tcell.avg.scaled.sub <- Tcell.avg.scaled[Cx_H2, ]

only.ChP <- subset(inf, subset = celltype == "ChP")
ChP.avg.scaled <- AverageExpression(only.ChP, assays = "RNA", group.by = "genotype", slot ="scale.data")
ChP.avg.scaled <- ChP.avg.scaled[[1]]
ChP.avg.scaled.sub <- ChP.avg.scaled[Cx_H2, ]

# Write files
setwd("./scaled_counts_Cx_H2")
write.csv2(micro.avg.scaled.sub, file = "Cx_H2_Micro_inf_scaled_avgcounts_lgtv_mocknone.csv", row.names = TRUE)
write.csv2(astro.avg.scaled.sub, file = "Cx_H2_Astro_inf__scaled_avgcounts_lgtv_mocknone.csv", row.names = TRUE)
write.csv2(oligo.avg.scaled.sub, file = "Cx_H2_Oligo_inf_scaled_avgcounts_lgtv_mocknone.csv", row.names = TRUE)
write.csv2(endo.avg.scaled.sub, file = "Cx_H2_Endo_inf_scaled_avgcounts_lgtv_mocknone.csv", row.names = TRUE)
write.csv2(OPC.avg.scaled.sub, file = "Cx_H2_OPC_inf_scaled_avgcounts_lgtv_mocknone.csv", row.names = TRUE)
write.csv2(VLMCs.avg.scaled.sub, file = "Cx_H2_VLMCs_inf__scaled_avgcounts_lgtv_mocknone.csv", row.names = TRUE)
write.csv2(ex.avg.scaled.sub, file = "Cx_H2_Neuron_ex_inf_scaled_avgcounts_lgtv_mocknone.csv", row.names = TRUE)
write.csv2(in.avg.scaled.sub, file = "Cx_H2_Neuron_in_inf_scaled_avgcounts_lgtv_mocknone.csv", row.names = TRUE)
write.csv2(pericytes.avg.scaled.sub, file = "Cx_H2_Pericytes_inf_scaled_avgcounts_lgtv_mocknone.csv", row.names = TRUE)
write.csv2(Tcell.avg.scaled.sub, file = "Cx_H2_Tcell_inf_scaled_avgcounts_lgtv_mocknone.csv", row.names = TRUE)
write.csv2(ChP.avg.scaled.sub, file = "Cx_H2_ChP_inf_scaled_avgcounts_lgtv_mocknone.csv", row.names = TRUE)

```

```{r}
# Deleting old files to clear up memory
rm(celltypes, dat.temp, deg, genes, a, deg.venn, genotype, overlap, unique.wt, unique.ifnar, print, i, no, only.micro, only.astro, only.ex, only.in, only.oligo, only.ChP, only.pericytes, only.OPC)
gc()
```

***
# Session Info

```{r}
sessionInfo()
```
