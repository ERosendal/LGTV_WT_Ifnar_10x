---
title: "Data Integration"
date: '`r format(Sys.Date(), "%B %d, %Y")`'
output:
  html_document:
    self_contained: true
    highlight: tango
    df_print: paged
    toc: yes
    toc_float:
      collapsed: false
      smooth_scroll: true
    toc_depth: 3
    keep_md: yes
    fig_caption: true
  html_notebook:
    self_contained: true
    highlight: tango
    df_print: paged
    toc: yes
    toc_float:
      collapsed: false
      smooth_scroll: true
    toc_depth: 3
editor_options: 
  chunk_output_type: inline
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(message=FALSE, warning=FALSE, result='hold',fig.width=12,tidy=TRUE)
knitr::opts_knit$set(progress=TRUE,verbose=TRUE)
```
<style>
h1, .h1, h2, .h2, h3, .h3, h4, .h4 { margin-top: 50px }
p.caption {font-size: 0.9em;font-style: italic;color: grey;margin-right: 10%;margin-left: 10%;text-align: justify}
</style>

***
# Loading data and libraries

### Libraries 

```{r libraries}
suppressPackageStartupMessages({
  library(Seurat)
  library(cowplot)
  library(ggplot2)
  library(magrittr)
  library(dplyr)
  library(rafalib)
})
```

### Data

```{r}

alldata <- readRDS("../QC/QC_230128_output/QC_230128.rds")

```

***
# Data integration

### Preprocessing

```{r preprocessing}
# Splitting merged data set into a list
alldata.list <- SplitObject(alldata, split.by = "orig.ident")

# General pre-processing on objects in list
for (i in 1:length(alldata.list)) {
    alldata.list[[i]] <- NormalizeData(alldata.list[[i]], verbose = FALSE)
    alldata.list[[i]] <- FindVariableFeatures(alldata.list[[i]], 
                                              selection.method = "vst",
                                              nfeatures = 2000,verbose = FALSE)
}

```

### Identifying anchors

```{r anchors}
# Anchors identified using the FindIntegrationAnchors function
alldata.anchors <- FindIntegrationAnchors(object.list = alldata.list, dims = 1:20, reduction = "cca")

```

```{r clean up1}
# Delete old files to clear up memory
rm(alldata.list)
gc()
```

### Integrating data

```{r data int}
# Anchors passed to the IntegrateData function, which returns a Seurat object.
alldata.int <- IntegrateData(anchorset = alldata.anchors, dims = 1:20, new.assay.name = "CCA", verbose = FALSE)

# Checking that new assay slot is created under the name `CCA`.
names(alldata.int@assays)

```

```{r clean up2}
# Delete old files to clear up memory
rm(alldata.anchors)
gc()
```

***
# Visualization of data integration

### Dimensionality reduction org. data

```{r dimred org data}
# Running general preprocessing and dimensionality reduction origianl data 
alldata <- NormalizeData(alldata)
alldata <- FindVariableFeatures(alldata)
alldata <- ScaleData(alldata, verbose = FALSE)
alldata <- ScaleData(alldata, verbose = FALSE)
alldata <- RunPCA(alldata, npcs = 30, verbose = FALSE)
alldata <- RunUMAP(alldata, 
                   reduction = "pca", 
                   dims = 1:30,
                   n.components=2,
                   n.neighbors=30,
                   n.epochs=200,
                   min.dist=0.3,
                   learning.rate=1,
                   spread=1)
```

### Dimensionality reduction integrated space

```{r dimred int data}
# Setting integrated data as default assay
DefaultAssay(alldata.int) <- "CCA"

all_genes <- rownames(alldata.int)

# Running Dimensionality reduction on integrated space
alldata.int <- ScaleData(alldata.int, features = all_genes, verbose = FALSE)
alldata.int <- RunPCA(alldata.int, npcs = 30, verbose = FALSE)
alldata.int <- RunUMAP(alldata.int, 
                   reduction = "pca", 
                   dims = 1:30,
                   n.components=2,
                   n.neighbors=30,
                   n.epochs=200,
                   min.dist=0.3,
                   learning.rate=1,
                   spread=1)

# Identify clusters
alldata.int <- FindNeighbors(alldata.int, reduction = "pca", dims = 1:30)
alldata.int <- FindClusters(alldata.int, resolution = 1)

```

```{r data int plot, fig.width=12, fig.height=3.5}
plot_grid(ncol = 3,
          DimPlot(alldata, reduction = "umap", group.by = "orig.ident")+NoAxes()
          +ggtitle("Not integrated"),
          DimPlot(alldata.int, reduction = "umap", group.by = "orig.ident")+NoAxes()
          +ggtitle("Integrated"),
          DimPlot(alldata.int, reduction = "umap", group.by = "CCA_snn_res.1")+NoAxes()
          +ggtitle("Integrated")
)
```
```{r clean up3}
# Deleting old files to clear up memory
rm(alldata, i)
gc()
```

***
# Save integrated data

```{r}
dir.create('./DataInt_230128_output', showWarnings = F)
saveRDS(alldata.int,"./DataInt_230128_output/QC_230128_DataInt_230128.rds")
```

***
# Session Info

```{r}
sessionInfo()
```

